---
import { ViewTransitions } from "astro:transitions";
import Navbar from "@/components/navbar/index.astro";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="pt">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body
    class="flex flex-col items-center bg-background text-font-normal font-semibold"
  >
    <Navbar />
    <div class="h-20 w-full"></div>
    <div aria-hidden class="w-8 h-4"></div>
    <div class="w-full max-w-5xl px-4 md:px-8 xl:px-0">
      <slot />
    </div>

    <script is:inline>
      var firstAnimation = false;
      var alreadyAnimated = [];
      const scrollElements = document.querySelectorAll(".js-scroll");
      if (scrollElements) {
        for (let elem of scrollElements) {
          !elem.classList.contains("invisible") &&
            elem.classList.add("invisible");
        }
      }
      const elementInView = (el, dividend = 1) => {
        const elementTop = el.getBoundingClientRect().top;
        const elem =
          elementTop + window.scrollY + Math.min(el.clientHeight, 100);
        const pc = window.scrollY + window.innerHeight;

        return pc >= elem;
      };

      const elementOutofView = (el) => {
        const elementTop = el.getBoundingClientRect().top;

        return (
          elementTop >
          (window.innerHeight || document.documentElement.clientHeight)
        );
      };

      const displayScrollElement = (element, withDelay) => {
        if (!element) return;
        let delay = 1;
        if (withDelay && document.documentElement.clientWidth > 700) {
          delay = Number(element.dataset?.delayanimation) || 1;
        }
        if (
          !element.classList?.contains("invisible") ||
          alreadyAnimated.includes(element)
        ) {
          return;
        }

        alreadyAnimated.push(element);
        setTimeout(() => {
          element.classList.toggle("invisible");
          element.classList.toggle("show-animation");
        }, delay);
      };

      const handleScrollAnimation = (withDelay) => {
        firstAnimation = true;
        scrollElements.forEach((el) => {
          if (elementInView(el, 1)) {
            displayScrollElement(el, withDelay);
          }
        });
      };

      window.addEventListener("scroll", () => {
        handleScrollAnimation(true);
      });

      window.addEventListener("resize", () => handleScrollAnimation(true));

      setTimeout(() => {
        !firstAnimation && handleScrollAnimation(true);
      }, 100);
    </script>

    <style is:global>
      @keyframes animation {
        0% {
          opacity: 0;
          scale: 0.9;
          transform: rotate(5deg);
        }

        50% {
          opacity: 1;
          scale: 1.05;
          transform: rotate(-1deg);
        }

        100% {
          scale: 1;
          transform: rotate(0deg);
        }
      }
      .invisible {
        opacity: 0;
      }
      .show-animation {
        animation: animation 200ms ease-in-out;
        animation-duration: 400ms;
      }
    </style>
  </body>
</html>
